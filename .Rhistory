# read in isotope data
d = as.matrix(read.csv("Downloads/isotopedata.csv"))
num.iso = 2
N = 1
num.prey = 3
library(siar)
data(geese1demo)
geese1demo
?siarmcmcdirichletv4
edit(siarmcmcdirichletv4)
siarModel = cat("
model {
p[1:num.prey] ~ ddirch(alpha[]);  # these are weights for means
for(i in 1:num.prey) {
p2[i] <- p[i]*p[i]; # these are weights for variances
}
# for each isotope and population, calculate the predicted mixtures
for(iso in 1:num.iso) {
mix.mu[iso] <- inprod(u[,iso],p[]);
#mix.var[iso] <- inprod(sigma2[,iso],p2[]);
mix.totalVar[iso] ~ dgamma(0.001,0.001);#<- mix.var[iso];
mix.prcsn[iso] <- 1/(mix.totalVar[iso]);
}
# This section does the likelihood / posterior, N data points
for(i in 1:N) {
for(iso in 1:num.iso) {
X[i,iso] ~ dnorm(mix.mu[iso], mix.prcsn[iso]);
}
}
}
", file="Downloads/siar.txt")
####### These are the parameters that need to be set by the user for MCMC estimation
library(R2jags)
library(runjags)
mcmc.chainLength <- as.integer(10000)  # post-burn
mcmc.burn <- as.integer(5000)
mcmc.thin = 1
mcmc.chains = 3
k = 1
u = matrix(NA, 3, 2)
u[,1] = as.numeric(d[k,c("terr_d13C","phyto_d13C","benthic_d13C")])
u[,2] = as.numeric(d[k,c("terr_dD","phyto_dD","benthic_dD")])
sigma2 = matrix(NA, 3, 2)
sigma2[,1] = as.numeric(d[k,c("terr_d13C_SD","phyto_d13C_SD","benthic_d13C_SD")])^2
sigma2[,2] = as.numeric(d[k,c("terr_dD_SD","phyto_dD_SD","benthic_dD_SD")])^2
X = matrix(as.numeric(d[k,c("consumer_d13C","consumer_dD")]), 1, 2)
TEF = matrix(NA, 3, 4)
TEF[,1] = as.numeric(d[k,c("TE_d13C")])
TEF[,2] = as.numeric(d[k,c("TE_d13C_SD")])
TEF[,3] = as.numeric(d[k,c("TE_dD")])
TEF[,4] = as.numeric(d[k,c("TE_dD_SD")])
u[,1] = u[,1] + TEF[,1]
u[,2] = u[,2] + TEF[,3]
num.iso = 2
N = 1
num.prey = 3
jags.data = list("X", "N","num.iso","num.prey")
jags.params=c("p")
model.loc=("Downloads/siar.txt")
jags.data = list("X", "N","num.iso","num.prey")
jags.params=c("p","mix.totalVar")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
alpha = rep(1, num.prey)
jags.data = list("X", "N","num.iso","num.prey","alpha")
jags.params=c("p","mix.totalVar")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
d = as.matrix(read.csv("Downloads/isotopedata.csv"))
siarModel = cat("
model {
p[1:num.prey] ~ ddirch(alpha[]);  # these are weights for means
for(i in 1:num.prey) {
p2[i] <- p[i]*p[i]; # these are weights for variances
}
# for each isotope and population, calculate the predicted mixtures
for(iso in 1:num.iso) {
mix.mu[iso] <- inprod(u[,iso],p[]);
#mix.var[iso] <- inprod(sigma2[,iso],p2[]);
mix.totalVar[iso] ~ dgamma(0.001,0.001);#<- mix.var[iso];
mix.prcsn[iso] <- 1/(mix.totalVar[iso]);
}
# This section does the likelihood / posterior, N data points
for(i in 1:N) {
for(iso in 1:num.iso) {
X[i,iso] ~ dnorm(mix.mu[iso], mix.prcsn[iso]);
}
}
}
", file="Downloads/siar.txt")
####### These are the parameters that need to be set by the user for MCMC estimation
library(R2jags)
library(runjags)
mcmc.chainLength <- as.integer(10000)  # post-burn
mcmc.burn <- as.integer(5000)
mcmc.thin = 1
mcmc.chains = 3
k = 1
u = matrix(NA, 3, 2)
u[,1] = as.numeric(d[k,c("terr_d13C","phyto_d13C","benthic_d13C")])
u[,2] = as.numeric(d[k,c("terr_dD","phyto_dD","benthic_dD")])
sigma2 = matrix(NA, 3, 2)
sigma2[,1] = as.numeric(d[k,c("terr_d13C_SD","phyto_d13C_SD","benthic_d13C_SD")])^2
sigma2[,2] = as.numeric(d[k,c("terr_dD_SD","phyto_dD_SD","benthic_dD_SD")])^2
X = matrix(as.numeric(d[k,c("consumer_d13C","consumer_dD")]), 1, 2)
TEF = matrix(NA, 3, 4)
TEF[,1] = as.numeric(d[k,c("TE_d13C")])
TEF[,2] = as.numeric(d[k,c("TE_d13C_SD")])
TEF[,3] = as.numeric(d[k,c("TE_dD")])
TEF[,4] = as.numeric(d[k,c("TE_dD_SD")])
u[,1] = u[,1] + TEF[,1]
u[,2] = u[,2] + TEF[,3]
num.iso = 2
N = 1
num.prey = 3
alpha = rep(1, num.prey)
jags.data = list("X", "N","num.iso","num.prey","alpha","u","sigma2")
jags.params=c("p","mix.totalVar")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
p[,1]
hist(p[,1])
hist(p[,2])
hist(p[,3])
hist(p[,4])
plot(u)
points(X)
points(X,col="red")
d[1,]
par(mfrow =c(3,2))
hist(p[,1],100,col="grey70",xlab = "Terr")
hist(p[,2],100,col="grey70",xlab = "Phyto")
hist(p[,3],100,col="grey70",xlab = "Benthic")
d[1,]
d[1,"Site"]
d[1,c("Site","Date")]
paste(d[1,c("Site","Date")])
paste(d[1,c("Site","Date")],sep="")
paste(d[1,c("Site")],d[1,c("Date")],sep="")
paste(d[1,c("Site")],d[1,c("Date")],sep=":")
sqrt(mix.totalVar)
sqrt(mix.totalVar[,1])
hist(sqrt(mix.totalVar[,1]))
hist(sqrt(mix.totalVar[,1]),100)
hist(sqrt(mix.totalVar[,1]),100,col="grey70")
# make histogram plot for this system
par(mfrow =c(3,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
dim(d)
d
read.csv("Downloads/isotopedata.csv")
d = read.csv("Downloads/isotopedata.csv")
d
names(d)
apply(d[,6:23],1,sum)
which(is.na(apply(d[,6:23],1,sum)))
# read in isotope data
d = read.csv("Downloads/isotopedata.csv")
# get rid of NAs
d = d[-which(is.na(apply(d[,6:23],1,sum))),]
dim(d)
d
# read in isotope data
d = read.csv("Downloads/isotopedata.csv")
# get rid of NAs
d = as.matrix(d[-which(is.na(apply(d[,6:23],1,sum))),])
pdf("SIAR_outputs.pdf")
for(k in 1:dim(d)[1]) {
u = matrix(NA, 3, 2)
u[,1] = as.numeric(d[k,c("terr_d13C","phyto_d13C","benthic_d13C")])
u[,2] = as.numeric(d[k,c("terr_dD","phyto_dD","benthic_dD")])
sigma2 = matrix(NA, 3, 2)
sigma2[,1] = as.numeric(d[k,c("terr_d13C_SD","phyto_d13C_SD","benthic_d13C_SD")])^2
sigma2[,2] = as.numeric(d[k,c("terr_dD_SD","phyto_dD_SD","benthic_dD_SD")])^2
X = matrix(as.numeric(d[k,c("consumer_d13C","consumer_dD")]), 1, 2)
TEF = matrix(NA, 3, 4)
TEF[,1] = as.numeric(d[k,c("TE_d13C")])
TEF[,2] = as.numeric(d[k,c("TE_d13C_SD")])
TEF[,3] = as.numeric(d[k,c("TE_dD")])
TEF[,4] = as.numeric(d[k,c("TE_dD_SD")])
u[,1] = u[,1] + TEF[,1]
u[,2] = u[,2] + TEF[,3]
num.iso = 2
N = 1
num.prey = 3
alpha = rep(1, num.prey)
jags.data = list("X", "N","num.iso","num.prey","alpha","u","sigma2")
jags.params=c("p","mix.totalVar")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
# make histogram plot for this system
par(mfrow =c(3,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
}
dev.off()
mcmc.chainLength <- as.integer(30000)  # post-burn
mcmc.burn <- as.integer(20000)
mcmc.thin = 1
mcmc.chains = 5
pdf("SIAR_outputs.pdf")
for(k in 1:dim(d)[1]) {
u = matrix(NA, 3, 2)
u[,1] = as.numeric(d[k,c("terr_d13C","phyto_d13C","benthic_d13C")])
u[,2] = as.numeric(d[k,c("terr_dD","phyto_dD","benthic_dD")])
sigma2 = matrix(NA, 3, 2)
sigma2[,1] = as.numeric(d[k,c("terr_d13C_SD","phyto_d13C_SD","benthic_d13C_SD")])^2
sigma2[,2] = as.numeric(d[k,c("terr_dD_SD","phyto_dD_SD","benthic_dD_SD")])^2
X = matrix(as.numeric(d[k,c("consumer_d13C","consumer_dD")]), 1, 2)
TEF = matrix(NA, 3, 4)
TEF[,1] = as.numeric(d[k,c("TE_d13C")])
TEF[,2] = as.numeric(d[k,c("TE_d13C_SD")])
TEF[,3] = as.numeric(d[k,c("TE_dD")])
TEF[,4] = as.numeric(d[k,c("TE_dD_SD")])
u[,1] = u[,1] + TEF[,1]
u[,2] = u[,2] + TEF[,3]
num.iso = 2
N = 1
num.prey = 3
alpha = rep(1, num.prey)
jags.data = list("X", "N","num.iso","num.prey","alpha","u","sigma2")
jags.params=c("p","mix.totalVar")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
# make histogram plot for this system
par(mfrow =c(3,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
}
dev.off()
jags.params=c("p","mix.totalVar","mix.mu")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
hist(mix.mu[,1])
hist(mix.mu[,2])
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(x,y,col="white",axes=F,main="",xlab="",ylab="")
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(x,y,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(mix.mu[,2],100,col="grey70",xlab = "Mixture mean - dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(x,y,col="white",axes=F,main="",xlab="",ylab="")
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(x,y,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(0,0,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(0,0,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(mix.mu[,2],100,col="grey70",xlab = "Mixture mean - dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
par(mfrow =c(4,2))
hist(p[,1],100,col="grey70",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="grey70",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="grey70",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(0,0,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(mix.mu[,2],100,col="grey70",xlab = "Mixture mean - dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
par(mfrow =c(4,2))
hist(p[,1],100,col="red",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="blue",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="green",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(0,0,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(mix.mu[,2],100,col="grey70",xlab = "Mixture mean - dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
pdf("SIAR_outputs.pdf")
for(k in 1:dim(d)[1]) {
u = matrix(NA, 3, 2)
u[,1] = as.numeric(d[k,c("terr_d13C","phyto_d13C","benthic_d13C")])
u[,2] = as.numeric(d[k,c("terr_dD","phyto_dD","benthic_dD")])
sigma2 = matrix(NA, 3, 2)
sigma2[,1] = as.numeric(d[k,c("terr_d13C_SD","phyto_d13C_SD","benthic_d13C_SD")])^2
sigma2[,2] = as.numeric(d[k,c("terr_dD_SD","phyto_dD_SD","benthic_dD_SD")])^2
X = matrix(as.numeric(d[k,c("consumer_d13C","consumer_dD")]), 1, 2)
TEF = matrix(NA, 3, 4)
TEF[,1] = as.numeric(d[k,c("TE_d13C")])
TEF[,2] = as.numeric(d[k,c("TE_d13C_SD")])
TEF[,3] = as.numeric(d[k,c("TE_dD")])
TEF[,4] = as.numeric(d[k,c("TE_dD_SD")])
u[,1] = u[,1] + TEF[,1]
u[,2] = u[,2] + TEF[,3]
num.iso = 2
N = 1
num.prey = 3
alpha = rep(1, num.prey)
jags.data = list("X", "N","num.iso","num.prey","alpha","u","sigma2")
jags.params=c("p","mix.totalVar","mix.mu")
model.loc=("Downloads/siar.txt")
jags.model = jags(jags.data, inits = NULL, parameters.to.save= jags.params, model.file=model.loc, n.chains = mcmc.chains, n.burnin = mcmc.burn, n.thin = mcmc.thin, n.iter = mcmc.chainLength, DIC = TRUE)
attach.jags(jags.model)
# make histogram plot for this system
par(mfrow =c(4,2))
hist(p[,1],100,col="red",xlab = "Terr",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,2],100,col="blue",xlab = "Phyto",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(p[,3],100,col="green",xlab = "Benthic",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
plot(0,0,col="white",axes=F,main="",xlab="",ylab="")
hist(mix.mu[,1],100,col="grey70",xlab = "Mixture mean - d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(mix.mu[,2],100,col="grey70",xlab = "Mixture mean - dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,1]),100,col="grey70", xlab = "sigma_d13C",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
hist(sqrt(mix.totalVar[,2]),100,col="grey70", xlab = "sigma_dD",main = paste(d[k,c("Site")],d[k,c("Date")],sep=":"))
}
dev.off()
getwd()
jags.mod
jags.model
0.70952
round(0.70952)
round(0.70952,3)
sites = 20
bs = runif(sites,0.3,0.5) # fecundities
ss = runif(sites, 0.4,0.6) # survivals
m = 0.03 # migration rate
matlist = list()
matlist2 = list()
for(i in 1:sites) {
matlist[[i]] = matrix(c(0,ss[i]*(1-m),bs[i]*(1-m),0),2,2) # these are the blocks for diagonals
matlist2[[i]] = matrix(c(0,ss[i]*m/(sites-1),bs[i]*m/(sites-1),0),2,2) # these are the blocks for off-diagonals
}
# start with first row of matrix
bigMat = as.matrix(matlist[[i]])
for(i in 2:sites) {bigMat = cbind(bigMat, as.matrix(matlist2[[i]]))}
# embed above in loop for other sites
for(j in 2:sites) {
rowmat = as.matrix(matlist2[[j]]) # start with off-diagonal element in rows 2:sites
for(i in 2:sites) {
if(i == j) rowmat = cbind(rowmat, as.matrix(matlist[[i]])) # diagonals all the same
if(i != j) rowmat = cbind(rowmat, as.matrix(matlist2[[i]])) # off diagonals all different
}
# include this row into the larger matrix
bigMat = rbind(bigMat, rowmat)
}
bigMat
eigen(Bmat)
eigen(bigMat)
eigen(bigMat)$values
bs
ss
# load libraries
library(Rcpp)
library(corpcor)
library(mcmc)
library(IMIS)
library(mvtnorm)
library(pso)
# set wd
setwd("/users/eric.ward/documents/projects/presenceAbsence")
#setwd("/users/James.Thorson/Desktop/Project_Git/presenceAbsence")
# source local functions and C++ code
source("presenceAbsence functions.r")
sourceCpp("code.cpp", verbose=TRUE)
observedStages = 2 # juvenile and adult PA data observed, otherwise = 1
# load in data
load("/Users/Eric.Ward/Downloads/ONP_SoleDuc98_amphibs.RData")
# get data for amma
amma = dat[,c("AMMA","Northing","Easting","elev")]
# create distance matrix
amma.dist = dist(amma[,c("Northing","Easting")], diag=T, upper=T)
# convert AMMA data to 0s and 1s based on juvenile (2)/ adult (1)
# format is Site1-stage1, Site1-stage2, Site2-stage1, Site2-stage2
nSite=dim(amma)[1]
y = rep(0, nSite*2)
y[which(amma$AMMA==2)*2-1] = 1 # fill in juveniles
y[which(amma$AMMA==1)*2] = 1 # fill in adults
temp = log(amma$elev) # the covariate needs to be named 'temp'
# Parameters: 1=log-Fecundity; 2=logit-junvenile survival; 3=logit-adult survival intercept; 4=logit-migration rate; 5=log-N; 6=survival slope
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.99), qlogis(0.05), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
backCalculateParameters(Est)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.1), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
backCalculateParameters(Est)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.1), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
backCalculateParameters(Est)
mlEst$par
print(mlEst$par)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.1), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
Fixed = c(log(0.9), qlogis(0.8), qlogis(0.9), qlogis(0.2), NA, NA)
mlEst = nlminb(start=runif(2), objective=FixedFn, Fixed=Fixed, control=list(trace=1))
Est = Fixed
Est[5:6] = mlEst$par
print(mlEst$par)
